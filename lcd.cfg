[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
#spi_software_sclk_pin = EXP2_2
#spi_software_mosi_pin = EXP2_6
#spi_software_miso_pin = EXP2_1
spi_software_sclk_pin = SCK
spi_software_mosi_pin = MOSI
spi_software_miso_pin = MISO
#spi_bus = spi1
encoder_pins = ^EXP2_3, ^EXP2_5
click_pin = ^!EXP1_2
menu_timeout = 15
contrast = 63
display_group = __voron_display

[neopixel neo_display]
pin = EXP1_6
chain_count = 3
initial_red = 1.0
initial_green = 0.0
initial_blue = 0.6
color_order = RGB

[output_pin _BEEPER]
pin: EXP1_1
pwm: TRUE
value: 0
shutdown_value: 0
# PWM frequency : 0.001 = 1ms will give a base tone of 1kHz
cycle_time: 0.0024

[include splash.cfg]

# add to use the click pin also to switch on display
[duplicate_pin_override]
pins: EXP1_2

# this solution is purly a workaround to switch on the display
# when pressing the menu button. It has the following limitaions:
#   - As it is handled as normal gcode it can take a few sec to
#     execute the gcode and light up
#   - At blocking gcodes e.g M190 it will executed after that finished
#   - You need to add _LCD_INIT_OFF manual to each menu item you 
#     execute with the menu.exit methode 
[gcode_button click_button_display]
pin: ^!EXP1_2
press_gcode:
  {% if printer.menu.running|lower == 'false' %}
    _DISPLAY_ON
  {% endif %}
release_gcode:
  # running is already low again wenn you leave the menu
  {% if printer.menu.running|lower == 'false' %}
    UPDATE_DELAYED_GCODE ID=_LCD_INIT_OFF DURATION=10
  {% endif %}

#####################################################################
# 	Glyph definition
#####################################################################
[display_glyph chamber]
data:
    0000000000000000
    1111111111111111
    1000010000100001
    1000010000100001
    1000011111100001
    1000000000000001
    1000000000000001
    1000001111000001
    1011101001011101
    1000001111000001
    1000000110000001
    1000000000000001
    1011111111111101
    1000100000010001
    1111111111111111
    0000000000000000
    
[display_glyph voron]
data:
    1111111001111111
    1111100000011111
    1111000000001111
    1100000000000011
    1000001100110001
    1000011001100001
    1000110011000001
    1001100110000001
    1000000110011001
    1000001100110001
    1000011001100001
    1000110011000001
    1110000000000111
    1111000000001111
    1111100000011111
    1111111001111111

[display_glyph voroninv]
data:
    0000001110000000
    0000111111100000
    0001111111110000
    0111111111111100
    1111100111001110
    1111001110011110
    1110011100111110
    1100111001111110
    1111110011100110
    1111100111001110
    1111001110011110
    1110011100111110
    0111111111111100
    0001111111110000
    0000111111100000
    0000001110000000
    
#####################################################################
# 	Display Data definition
#####################################################################
[display_template _vheater_temperature]
param_heater_name: "extruder"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "heater_bed" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { "%3.0f" % (heater.temperature,) }
    # Optionally show target
    {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_data __voron_display extruder]
position: 0, 0
text: { render("_vheater_temperature", param_heater_name="extruder") }

[display_data __voron_display fan]
position: 0, 10
text:
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% endif %}

[display_data __voron_display bed]
position: 1, 0
text: { render("_vheater_temperature", param_heater_name="heater_bed") }

[display_data __voron_display progress_text]
position: 1, 10
text:
  {% set progress = printer.virtual_sdcard.progress %}
  { "{:^6.0%}".format(progress) }
  
[display_data __voron_display progress_text2]
position: 1, 10
text:
  {% set progress = printer.virtual_sdcard.progress %}
  { draw_progress_bar(1, 10, 6, progress) }

[display_data __voron_display printing_time]
position: 2, 10
text:
  {% set ptime = printer.print_stats.total_duration %}
  { "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

[display_data __voron_display print_status]
position: 3, 0
text: 
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time|int != 0 %}
    {% set pos = printer.toolhead.position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    { "Voron 2.4 " }
	~voron~
  {% endif %}
  
#####################################################################
# 	Bepper Macro
#####################################################################
#  M300 [P<ms>] [S<Hz>]
#  P is the tone duration, S the tone frequency.
#  The frequency won't be pitch perfect.
[gcode_macro M300]
description: Set Beeper value
gcode:
    # set default parameter value
    {% set freq = params.S|default(440)|float %}
    {% set time = params.P|default(100)|int %}
    {% if S|float != 0 %}
        SET_PIN PIN=_BEEPER VALUE=0.3 CYCLE_TIME={1/freq}
    {% endif %}
    G4 P{time}
    SET_PIN PIN=_BEEPER VALUE=0
    
#####################################################################
# 	Macro
#####################################################################
[delayed_gcode _LCD_INIT_KNOB]
initial_duration: 1
gcode:
  ##### get hardware enables #####
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  ##### end of definiton #####
  {% if ena_neo == 'true' %} _LCD_KNOB COLOR=GREEN SYNC=0 {% endif %}
  
[delayed_gcode _LCD_INIT_OFF]
initial_duration: 10
gcode:
  ##### get hardware enables #####
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  ##### switch off if not already in menu #####
  {% if printer.menu.running|lower == 'false' and ena_neo == 'true' %}
    SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"off"'
    SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=1 SYNC=0
  {% endif %}

[gcode_macro _LCD_KNOB]
description: Helper: Set LCD Knob color
# array is defined: [ R ,  G  , B ]
variable_pri_color: [0.0, 0.3, 0.0]    ; primary color will be used for restore 
variable_sec_color: [0.0, 0.0, 0.0]    ; secondary color for blinking always off
variable_res_color: [0.0, 0.3, 0.0]    ; restore color will be used as primary 
variable_index: 2                      ; used for blinking
variable_time: 0                       ; timeinterval for blinking
variable_sync: 1                       ; decide if the LED needs to be sync with movement queue 
gcode:
  ##### color definition #####
  # array is defined: [  name ,  R ,  G  , B ]
  {% set def_color = [('OFF'  , 0.0, 0.0, 0.0),
                      ('GREEN', 0.0, 0.3, 0.0),
                      ('RED'  , 0.5, 0.0, 0.0),
                      ('BLUE' , 0.0, 0.0, 0.5)] %}
  ##### get default parameter value #####
  {% set time = params.BLINK|default(0)|float %}
  {% set sync = params.SYNC|default(0)|int %}
  ##### get values of requested color ##### 
  {% if params and COLOR in params|upper %}
    {% set elem_cnt = def_color|length %}
    {% set ns = namespace(elem = elem_cnt) %}
    {% for cnt in range(elem_cnt) %}
      {% if def_color[cnt][0]|upper == params.COLOR|upper %}
         {% set ns.elem = cnt %}
      {% endif %}
    {% endfor %}
    {% if ns.elem < elem_cnt %}
       {% set col = [def_color[ns.elem][1],def_color[ns.elem][2],def_color[ns.elem][3]] %}
    {% else %}
      {action_respond_info("LCD KNOB COLOR %s is not defined used default: GREEN" % (params.COLOR|upper))}
      {% set col = [def_color[1][1],def_color[1][2],def_color[1][3]] %}
    {% endif %}
  {% else %}
    {% set col = res_color %}
  {% endif %}
  ##### store new variable values #####
  SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=sync VALUE={sync}
  SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=time VALUE={time}
  SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=res_color VALUE="{pri_color}"
  SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=pri_color VALUE="{col}"
  ##### update to new color and start or stop blinking #####
  UPDATE_DELAYED_GCODE ID=_BLINK_DELAY DURATION={time}
  SET_LED LED=neo_display RED={col[0]} GREEN={col[1]}  BLUE={col[2]} INDEX=2 TRANSMIT=0 SYNC={sync}
  SET_LED LED=neo_display RED={col[0]} GREEN={col[1]}  BLUE={col[2]} INDEX=3 TRANSMIT=1 SYNC={sync}
    
[delayed_gcode _BLINK_DELAY]
gcode:
  ##### get variables #####
  {% set col1 = printer["gcode_macro _LCD_KNOB"].pri_color %}
  {% set col2 = printer["gcode_macro _LCD_KNOB"].sec_color %}
  {% set sync=printer["gcode_macro _LCD_KNOB"].sync|int %}
  {% set index = printer["gcode_macro _LCD_KNOB"].index|int %}
  {% set time =  printer["gcode_macro _LCD_KNOB"].time|float %}
  ##### end of definition #####
  {% if index == 2 %}
    SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=index VALUE=3
    SET_LED LED=neo_display RED={col1[0]} GREEN={col1[1]} BLUE={col1[2]} INDEX=2 TRANSMIT=0 SYNC={sync}
    SET_LED LED=neo_display RED={col2[0]} GREEN={col2[1]} BLUE={col2[2]} INDEX=3 TRANSMIT=1 SYNC={sync}
  {% else %}
    SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=index VALUE=2
    SET_LED LED=neo_display RED={col2[0]} GREEN={col2[1]} BLUE={col2[2]} INDEX=2 TRANSMIT=0 SYNC={sync}
    SET_LED LED=neo_display RED={col1[0]} GREEN={col1[1]} BLUE={col1[2]} INDEX=3 TRANSMIT=1 SYNC={sync}
  {% endif %}
  UPDATE_DELAYED_GCODE ID=_BLINK_DELAY DURATION={time}

[gcode_macro DISPLAY]
description: Toggle Display backlight
variable_state: 'on'
gcode:
  {% if printer["gcode_macro DISPLAY"].state == 'on' %}
    _DISPLAY_OFF
  {% else %}
    _DISPLAY_ON
  {% endif %}
  _DISPLAY_STATE
    
[gcode_macro _DISPLAY_STATE]
description: Helper: Print display backlight state
gcode:
  {action_respond_info("LCD display %s" % (printer["gcode_macro DISPLAY"].state))}

[gcode_macro _DISPLAY_OFF]
description: Helper: Display backlight off
gcode:
  ##### get hardware enables #####
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  ##### switch off if not already in menu #####
  {% if printer.menu.running|lower == 'false' and ena_neo == 'true' %}
    SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"off"'
    SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=1 SYNC=0
  {% endif %}

[gcode_macro _DISPLAY_ON]
description: Helper: Display backlight on
gcode:
  ##### get hardware enables #####
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  ##### end of definiton #####
  {% if ena_neo == 'true' %}
    SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"on"'
    SET_LED LED=neo_display RED=0.2 GREEN=0.4 BLUE=1.0 INDEX=1 TRANSMIT=1 SYNC=0
  {% endif %}